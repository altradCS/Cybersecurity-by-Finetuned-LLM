import streamlit as st
from transformers import pipeline, DistilBertTokenizer, DistilBertForSequenceClassification, AutoTokenizer, AutoModelForSequenceClassification
import torch

# Load pre-trained sentiment analysis model
nlptown = "nlptown/bert-base-multilingual-uncased-sentiment"
tokenizer = AutoTokenizer.from_pretrained(nlptown)
model_nlptown = AutoModelForSequenceClassification.from_pretrained(nlptown)
sentiment_classifier = pipeline("sentiment-analysis", model=model_nlptown , tokenizer=tokenizer)

# Load pre-trained DistilBERT model and tokenizer
model_name = "distilbert-base-uncased-finetuned-sst-2-english"
tokenizer_sentiment = DistilBertTokenizer.from_pretrained(model_name)
model_sentiment = DistilBertForSequenceClassification.from_pretrained(model_name)

# Function to analyze text for fraudulent activities
def analyze_text(text1):
    inputs = tokenizer_sentiment(text1, return_tensors="pt", truncation=True)
    with torch.no_grad():
        outputs = model_sentiment(**inputs)
    prediction = torch.argmax(outputs.logits, dim=1).item()
    return prediction

# Function to display result for fraudulent activities
def display_result(result1):
    st.subheader("Analysis Result:")
    if result1 == 1:
        st.error("Fraudulent activity detected!")
    else:
        st.success("No fraudulent activity detected.")

# Function to analyze text sentiment
def analyze_text_sentiment(text2):
    classifier = pipeline("sentiment-analysis", model=model_sentiment, tokenizer=tokenizer_sentiment)
    result = classifier(text2)
    return result

# Function to display sentiment analysis result
def display_sentiment_result(result2):
    st.subheader("Sentiment Analysis Result:")
    st.write(f"Sentiment: {result2[0]['label']} with confidence {result2[0]['score']:.4f}")

# Streamlit app
def main():
    st.title("Cybersecurity Pentest Web Application")

    # Sidebar options
    option = st.sidebar.selectbox("Select LLM & Analyze Traffic", ["Analyze Suspicious via Distilbert", 
                                                       "Analyze Suspicious via Finetuned Distilbert",
                                                       "Analyze Suspicious via NLPTown"])

    if option == "Analyze Suspicious via Distilbert":
        text1 = st.text_area("Enter your text for analysis:", "")
        if st.button("Analyze"):
            if text1:
                fraud_detection_result = analyze_text(text1)
                display_result(fraud_detection_result)
            else:
                st.warning("Please enter text for analysis.")

    elif option == "Analyze Suspicious via Finetuned Distilbert":
        text2 = st.text_area("Enter text for analysis :", "")
        if st.button("Test Data"):
            if text2:
                sentiment_result = analyze_text_sentiment(text2)
                display_sentiment_result(sentiment_result)
            else:
                st.warning("Please enter text for analysis.")

    elif option == "Analyze Suspicious via NLPTown":
        text_suspicious = st.text_area("Enter text for suspicious analysis:", "")
        if st.button("Evaluate"):
            if text_suspicious:
                result_suspicious = sentiment_classifier(text_suspicious)
                display_sentiment_result(result_suspicious)
            else:
                st.warning("Please enter text for analysis.")

if __name__ == "__main__":
    main()
